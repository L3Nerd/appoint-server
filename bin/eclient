#!/usr/bin/env ruby

require 'trollop'
require 'rest-client'
require 'json'
require 'date'

SUB_COMMANDS = %w(appointment vote)
APP_CMD = %w(show create update delete)
VOTE_CMD = %w(create update delete)

module Client
  class Appointment
    attr_accessor :id
    attr_accessor :title
    attr_accessor :dates
    attr_accessor :token
    attr_accessor :votes

    def initialize(g)
      @global_opts = g
    end

    def fetch(id)
      begin
        @id = id
        r = RestClient.get("http://#{@global_opts[:address]}:#{@global_opts[:port]}/events/#{id}")
        v = RestClient.get("http://#{@global_opts[:address]}:#{@global_opts[:port]}/events/#{id}/votes")
        self.parse(r)
        self.parse(v)
        self
      rescue RestClient::NotFound
        puts "event with id \"#{id}\" not found"
        exit
      end
    end

    def create
      begin
        r = RestClient.post("http://#{@global_opts[:address]}:#{@global_opts[:port]}/events", self.to_json, :content_type => :json, :accept => :json)
        self.parse(r)
        self
      rescue => e
        puts e.inspect
        exit
      end
    end

    def update
      begin
        self.input
        data = self.to_data
        data["token"] = @token
        r = RestClient.put("http://#{@global_opts[:address]}:#{@global_opts[:port]}/events/#{@id}", data.to_json, :content_type => :json, :accept => :json)
        self.parse(r)
        self
      rescue RestClient::Unauthorized
        puts "wrong authorization token"
        exit
      rescue => e
        puts e.inspect
        exit
      end
    end

    def delete
      begin
        RestClient::Request.execute(method: :delete, url: "http://#{@global_opts[:address]}:#{@global_opts[:port]}/events/#{@id}",
                            payload: {"token" => @token})
      rescue RestClient::NotFound
        puts "appointment with id \"#{@id}\" not found"
        exit
      rescue RestClient::Unauthorized
        puts "wrong authorization token"
        exit
      end
    end

    def input
      puts "\nEnter Title: "
      @title = gets.chomp

      @dates = Array.new

      puts "\nEnter multiple dates: (Hit [Enter] after date, leave empty to stop input)\n"
      while (line = gets.chomp) != ""
        begin
          @dates << Date.parse(line).strftime("%Y-%m-%dT%H:%M:%SZ")
        rescue ArgumentError
          puts "\nValid date format is: YYYY-MM-DD or DD.MM.YYY\n"
        end
      end

      if @dates.empty?
        puts "At least one date needed!"
        exit
      end

      self
    end

    def parse(r)
      j = JSON.parse(r)
      @id    = j["eventID"] if j["eventID"]
      @title = j["title"] if j["title"]
      @dates = j["dates"] if j["dates"]
      @token = j["token"] if j["token"]
      @votes = j["voters"] if j["voters"]
    end

    def print
      puts ""
      puts "token:       #{@token}\n" if @token
      puts "ID:          #{@id}"
      puts "Title:       #{@title}"

      self.print_dates

      if @votes
        puts "\nVotes:"
        @votes.each do |vote|
          puts ""
          puts "  Username: #{vote["user"]}"
          vote["votes"].each do |vote|
            puts "    Date:   #{vote["date"]}"
            puts "    Answer: #{vote["preference"]}"
          end
        end
        puts ""
      end
    end

    def print_dates
      if @dates
        puts "\nDates:"
        @dates.each do |date|
          puts "  Date: #{DateTime.parse(date).strftime("%Y-%m-%dT%H:%M:%SZ")}"
        end
      end
    end

    def to_data
      {
        "title"       => @title,
        "dates"       => @dates,
      }
    end

    def to_json
      self.to_data.to_json
    end

  end

  ######VOTE

  class Vote
    attr_accessor :id
    attr_accessor :username
    attr_accessor :votes
    attr_accessor :token

    def initialize(g, app_id)
      @global_opts = g
      @appointment_id = app_id
      @appointment = Client::Appointment.new(g).fetch(app_id)
    end

    def create
      begin
        r = RestClient.post("http://#{@global_opts[:address]}:#{@global_opts[:port]}/events/#{@appointment_id}/votes", self.to_json, :content_type => :json, :accept => :json)
        self.parse(r)
        self
      rescue => e
        puts e.inspect
        exit
      end
    end

    def update
      begin
        self.input
        data = self.to_data
        data["token"] = @token
        r = RestClient.put("http://#{@global_opts[:address]}:#{@global_opts[:port]}/events/#{@appointment_id}/votes/#{@id}", data.to_json, :content_type => :json, :accept => :json)
        self.parse(r)
        self
      rescue RestClient::Unauthorized
        puts "wrong authorization token"
        exit
      rescue => e
        puts e.inspect
        exit
      end
    end

    def delete
      begin
        RestClient::Request.execute(method: :delete, url: "http://#{@global_opts[:address]}:#{@global_opts[:port]}/events/#{@appointment_id}/votes/#{@id}",
                            payload: {"token" => @token})
      rescue RestClient::NotFound
        puts "vote with id \"#{@id}\" not found"
        exit
      rescue RestClient::Unauthorized
        puts "wrong authorization token"
        exit
      end
    end

    def input
      puts "\nEnter Username: "
      @username = gets.chomp

      self.input_choices

      self
    end

    def input_choices
      @choices = Array.new
      puts ""
      @appointment.dates.each do |date|
        puts date
        puts "preference? [yes, no, maybe]"
        pref = gets.chomp
        puts ""

        vote = Hash.new
        vote["date"] = date
        vote["preference"] = pref
        @choices << vote
      end
    end

    def parse(r)
      j = JSON.parse(r)
      @id         = j["voteID"] if j["voteID"]
      @token      = j["token"] if j["token"]
    end

    def print
      puts ""
      puts "token:       #{@token}\n" if @token
      puts "ID:          #{@id}"
      puts "Username:    #{@username}" if @username
      puts ""
    end

    def to_data
      {
        "user"  => @username,
        "votes" => @choices,
      }
    end

    def to_json
      self.to_data.to_json
    end

  end


end

### begin main
global_opts = Trollop::options do
    banner <<-EOS
this is a program that queries the appoint rest-http API

Usage:
       client [resource] [subcommand] [ARGS]

where [resource] are:
- appointment
- vote

and [subcommand] are:
show
create
update
delete

query subcommand for more help ( client vote create --help )

global [ARGS] are:
EOS
  opt :address, "Address of appoint-webservice", :short => 'a', :default => 'localhost'
  opt :port, "Port of appoint-webservice", :short => 'p', :default => 8080
  stop_on SUB_COMMANDS
end

sub_cmd = ARGV.shift # get the subcommand

Trollop::die "unknown subcommand #{sub_cmd.inspect}" if !SUB_COMMANDS.include? sub_cmd

subsub_cmd = ARGV.shift # get the subsubcommand

# evaluate appointment subcommands and options
if sub_cmd == "appointment" then
  cmd_opts = case subsub_cmd
    when "create"
      Trollop::options do
      end
    when "show"
      Trollop::options do
        opt :id, "appointment id", :type => :string, :required => true
      end
    when "update"
      Trollop::options do
        opt :id, "appointment id", :type => :string, :required => true
        opt :token, "api token", :type => :string, :required => true
      end
    when "delete"
      Trollop::options do
        opt :id, "appointment id", :type => :string, :required => true
        opt :token, "api token", :type => :string, :required => true
      end
  end

  Trollop::die "unknown subcommand #{subsub_cmd.inspect}" if !APP_CMD.include? subsub_cmd
end

# evaluate vote subcommands and options
if sub_cmd == "vote" then
  cmd_opts = case subsub_cmd
    when "create"
      Trollop::options do
        opt :appointment_id, "appointment id", :type => :string, :required => true
      end
    when "update"
      Trollop::options do
        opt :id, "vote id", :type => :string, :required => true
        opt :appointment_id, "appointment id", :type => :string, :required => true
        opt :token, "api token", :type => :string, :required => true
      end
    when "delete"
      Trollop::options do
        opt :id, "vote id", :type => :string, :required => true
        opt :appointment_id, "appointment id", :type => :string, :required => true
        opt :token, "api token", :type => :string, :required => true
      end
  end

  Trollop::die "unknown subcommand #{subsub_cmd.inspect}" if !VOTE_CMD.include? subsub_cmd
end

appointment = Client::Appointment.new(global_opts)

case subsub_cmd
  when "show"
    appointment.fetch(cmd_opts[:id]).print
  when "create"
    case sub_cmd
      when "appointment"
        appointment.input.create.print
      when "vote"
        vote = Client::Vote.new(global_opts, cmd_opts[:appointment_id])
        vote.input.create.print
    end

  when "update"
    case sub_cmd
      when "appointment"
        appointment.fetch(cmd_opts[:id]).token = cmd_opts[:token]
        appointment.update.print
      when "vote"
        vote = Client::Vote.new(global_opts, cmd_opts[:appointment_id])
        vote.id = cmd_opts[:id]
        vote.token = cmd_opts[:token]
        vote.update
    end
  when "delete"
    case sub_cmd
      when "appointment"
        appointment.id = cmd_opts[:id]
        appointment.token = cmd_opts[:token]
        appointment.delete
      when "vote"
        vote = Client::Vote.new(global_opts, cmd_opts[:appointment_id])
        vote.id = cmd_opts[:id]
        vote.token = cmd_opts[:token]
        vote.delete
    end
end
